worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;  # Include default MIME types

    # Redirect HTTP to HTTPS for localhost
    server {
        listen 80;
        server_name localhost;
        return 301 https://localhost$request_uri;
    }

    # Redirect HTTP to HTTPS for skippings.com (production)
    server {
        listen 80;
        server_name skippings.com www.skippings.com;
        return 301 https://$host$request_uri;
    }

    # HTTPS for localhost (local development)
    server {
        listen 443 ssl;
        server_name localhost;

        # Localhost SSL Configuration
        ssl_certificate /etc/nginx/ssl/localhost-dev.crt;
        ssl_certificate_key /etc/nginx/ssl/localhost-dev.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Proxy frontend for localhost
        location / {
            proxy_pass http://frontend:9000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # # Serve static files for production frontend
        # location / {
        #     root /usr/share/nginx/html;
        #     index index.html;
        #     try_files $uri $uri/ /index.html;
        # }

        # Expose Sensor Data API publicly
        location /api/sensor-data {
            proxy_pass http://backend:5000/api/sensor-data;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Expose Sensor Data Sub-API's publicly
        location /api/sensor-data/ {
            proxy_pass http://backend:5000/api/sensor-data/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Allow frontend to access all /api/ routes via CORS
        location /api/ {
            # Enable CORS headers for the frontend
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';

            # Handle preflight requests (CORS OPTIONS request)
            if ($request_method = OPTIONS) {
                return 204;
            }

            # Proxy all /api/ requests to the backend
            proxy_pass http://backend:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Restrict external access to anything other than /api/sensor-data
            if ($http_origin !~* "localhost") {
                return 403;
            }
        }

        # Test endpoint for localhost
        location /test {
            return 200 "Success - HTTPS is working for localhost!";
        }
    }

    # HTTPS for skippings.com (production)
    server {
        listen 443 ssl;
        server_name skippings.com www.skippings.com;

        # Production SSL Configuration
        ssl_certificate /etc/nginx/ssl/skippings.com-prod.crt;
        ssl_certificate_key /etc/nginx/ssl/skippings.com-prod.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Proxy frontend for skippings.com (dev-only)
        # location / {
        #     proxy_pass http://frontend:9000;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "Upgrade";
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }

        # Serve static files for production frontend
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # Expose Sensor Data API publicly
        location /api/sensor-data {
            proxy_pass http://backend:5000/api/sensor-data;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Expose Sensor Data Sub-API's publicly
        location /api/sensor-data/ {
            proxy_pass http://backend:5000/api/sensor-data/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Allow frontend to access all /api/ routes via CORS
        location /api/ {
            # Enable CORS headers for the frontend
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';

            # Handle preflight requests (CORS OPTIONS request)
            if ($request_method = OPTIONS) {
                return 204;
            }

            # Proxy all /api/ requests to the backend
            proxy_pass http://backend:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Restrict external access to anything other than /api/sensor-data
            if ($http_origin !~* "skippings.com") {
                return 403;
            }
        }

        # Test endpoint for skippings.com
        location /test {
            return 200 "Success - HTTPS is working for skippings.com!";
        }
    }
}